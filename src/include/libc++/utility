
#ifndef LIBCPP_UTILITY
#define LIBCPP_UTILITY

namespace std {

template <class T>
struct remove_reference { typedef T type; };

template <class T>
struct remove_reference<T&> { typedef T type; };

template <class T>
struct remove_reference<T&&> { typedef T type; };

template <class T>
T&& forward(typename remove_reference<T>::type& t) noexcept {
  return static_cast<T&&>(t);
}

template <class T>
T&& forward(typename remove_reference<T>::type&& t) noexcept {
  return static_cast<T&&>(t);
}

}

#endif
